/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */





declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AnnotationTagCreateManyWithoutImageInput: { // input type
    connect?: NexusGenInputs['AnnotationTagWhereUniqueInput'][] | null; // [AnnotationTagWhereUniqueInput!]
    connectOrCreate?: NexusGenInputs['AnnotationTagCreateOrConnectWithoutImageInput'][] | null; // [AnnotationTagCreateOrConnectWithoutImageInput!]
    create?: NexusGenInputs['AnnotationTagCreateWithoutImageInput'][] | null; // [AnnotationTagCreateWithoutImageInput!]
  }
  AnnotationTagCreateOrConnectWithoutImageInput: { // input type
    create: NexusGenInputs['AnnotationTagCreateWithoutImageInput']; // AnnotationTagCreateWithoutImageInput!
    where: NexusGenInputs['AnnotationTagWhereUniqueInput']; // AnnotationTagWhereUniqueInput!
  }
  AnnotationTagCreateWithoutImageInput: { // input type
    id?: string | null; // String
    name: string; // String!
  }
  AnnotationTagWhereUniqueInput: { // input type
    id?: string | null; // String
    name?: string | null; // String
  }
  ImageCreateOneWithoutUserInput: { // input type
    connect?: NexusGenInputs['ImageWhereUniqueInput'] | null; // ImageWhereUniqueInput
    connectOrCreate?: NexusGenInputs['ImageCreateOrConnectWithoutuserInput'] | null; // ImageCreateOrConnectWithoutuserInput
    create?: NexusGenInputs['ImageCreateWithoutUserInput'] | null; // ImageCreateWithoutUserInput
  }
  ImageCreateOrConnectWithoutuserInput: { // input type
    create: NexusGenInputs['ImageCreateWithoutUserInput']; // ImageCreateWithoutUserInput!
    where: NexusGenInputs['ImageWhereUniqueInput']; // ImageWhereUniqueInput!
  }
  ImageCreateWithoutUserInput: { // input type
    annotationTag?: NexusGenInputs['AnnotationTagCreateManyWithoutImageInput'] | null; // AnnotationTagCreateManyWithoutImageInput
    id?: string | null; // String
  }
  ImageWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  ProfileCreateInput: { // input type
    bio: string; // String!
    id?: string | null; // String
    user: NexusGenInputs['UserCreateOneWithoutProfileInput']; // UserCreateOneWithoutProfileInput!
  }
  ProfileCreateOneWithoutUserInput: { // input type
    connect?: NexusGenInputs['ProfileWhereUniqueInput'] | null; // ProfileWhereUniqueInput
    connectOrCreate?: NexusGenInputs['ProfileCreateOrConnectWithoutuserInput'] | null; // ProfileCreateOrConnectWithoutuserInput
    create?: NexusGenInputs['ProfileCreateWithoutUserInput'] | null; // ProfileCreateWithoutUserInput
  }
  ProfileCreateOrConnectWithoutuserInput: { // input type
    create: NexusGenInputs['ProfileCreateWithoutUserInput']; // ProfileCreateWithoutUserInput!
    where: NexusGenInputs['ProfileWhereUniqueInput']; // ProfileWhereUniqueInput!
  }
  ProfileCreateWithoutUserInput: { // input type
    bio: string; // String!
    id?: string | null; // String
  }
  ProfileWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  UserCreateInput: { // input type
    email: string; // String!
    id?: string | null; // String
    Image?: NexusGenInputs['ImageCreateOneWithoutUserInput'] | null; // ImageCreateOneWithoutUserInput
    name?: string | null; // String
    profile?: NexusGenInputs['ProfileCreateOneWithoutUserInput'] | null; // ProfileCreateOneWithoutUserInput
    role?: NexusGenEnums['Role'] | null; // Role
  }
  UserCreateOneWithoutProfileInput: { // input type
    connect?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
    connectOrCreate?: NexusGenInputs['UserCreateOrConnectWithoutprofileInput'] | null; // UserCreateOrConnectWithoutprofileInput
    create?: NexusGenInputs['UserCreateWithoutProfileInput'] | null; // UserCreateWithoutProfileInput
  }
  UserCreateOrConnectWithoutprofileInput: { // input type
    create: NexusGenInputs['UserCreateWithoutProfileInput']; // UserCreateWithoutProfileInput!
    where: NexusGenInputs['UserWhereUniqueInput']; // UserWhereUniqueInput!
  }
  UserCreateWithoutProfileInput: { // input type
    email: string; // String!
    id?: string | null; // String
    Image?: NexusGenInputs['ImageCreateOneWithoutUserInput'] | null; // ImageCreateOneWithoutUserInput
    name?: string | null; // String
    role?: NexusGenEnums['Role'] | null; // Role
  }
  UserWhereUniqueInput: { // input type
    email?: string | null; // String
    id?: string | null; // String
  }
}

export interface NexusGenEnums {
  Role: "ADMIN" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AnnotationTag: { // root type
    id: string; // String!
    name: string; // String!
  }
  Image: { // root type
    id: string; // String!
  }
  Mutation: {};
  Profile: { // root type
    bio: string; // String!
    id: string; // String!
    userId: string; // String!
  }
  Query: {};
  User: { // root type
    email: string; // String!
    id: string; // String!
    name?: string | null; // String
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AnnotationTag: { // field return type
    id: string; // String!
    name: string; // String!
  }
  Image: { // field return type
    annotationTag: NexusGenRootTypes['AnnotationTag'][]; // [AnnotationTag!]!
    id: string; // String!
    user: NexusGenRootTypes['User'][]; // [User!]!
  }
  Mutation: { // field return type
    createOneProfile: NexusGenRootTypes['Profile']; // Profile!
    createOneUser: NexusGenRootTypes['User']; // User!
  }
  Profile: { // field return type
    bio: string; // String!
    id: string; // String!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Query: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    email: string; // String!
    id: string; // String!
    name: string | null; // String
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenFieldTypeNames {
  AnnotationTag: { // field return type name
    id: 'String'
    name: 'String'
  }
  Image: { // field return type name
    annotationTag: 'AnnotationTag'
    id: 'String'
    user: 'User'
  }
  Mutation: { // field return type name
    createOneProfile: 'Profile'
    createOneUser: 'User'
  }
  Profile: { // field return type name
    bio: 'String'
    id: 'String'
    user: 'User'
    userId: 'String'
  }
  Query: { // field return type name
    user: 'User'
  }
  User: { // field return type name
    email: 'String'
    id: 'String'
    name: 'String'
    role: 'Role'
  }
}

export interface NexusGenArgTypes {
  Image: {
    annotationTag: { // args
      after?: NexusGenInputs['AnnotationTagWhereUniqueInput'] | null; // AnnotationTagWhereUniqueInput
      before?: NexusGenInputs['AnnotationTagWhereUniqueInput'] | null; // AnnotationTagWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    user: { // args
      after?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      before?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Mutation: {
    createOneProfile: { // args
      data: NexusGenInputs['ProfileCreateInput']; // ProfileCreateInput!
    }
    createOneUser: { // args
      data: NexusGenInputs['UserCreateInput']; // UserCreateInput!
    }
  }
  Query: {
    user: { // args
      where: NexusGenInputs['UserWhereUniqueInput']; // UserWhereUniqueInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}